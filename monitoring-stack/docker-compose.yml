services:
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v3.3.0
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./configs/prometheus/rules/:/etc/prometheus/rules/:ro
      - ./volumes/prometheus/metrics:/prometheus
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=15d"
    networks:
      - devices_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/ready"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s

  alertmanager:
    container_name: alertmanager
    build:
      dockerfile: ${ALERTMANAGER_DOCKERFILE}
      context: .
    image: ${ALERTMANAGER_IMG}
    ports:
      - "9093:9093"
    volumes:
      - ./configs/prometheus/alertmanager/alertmanager.yml.template:/etc/alertmanager/alertmanager.yml.template:ro
      - ./volumes/alertmanager:/alertmanager
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env.secrets
    networks:
      - devices_network
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9093/-/ready"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 15s

  grafana:
    container_name: grafana
    image: grafana/grafana:11.6.0
    user: "472"
    ports:
      - "3000:3000"
    env_file:
      - .env
      - .env.secrets
    networks:
      - devices_network
    volumes:
      - ./volumes/grafana/config/:/var/lib/grafana
      - ./configs/grafana/dashboard-json:/etc/grafana/dashboards
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      prometheus:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 45s
      timeout: 15s
      retries: 5
      start_period: 90s

  # renderer:
  #   image: grafana/grafana-image-renderer:v4.0.10
  #   container_name: grafana-image-renderer
  #   ports:
  #     - "8081:8081"
  #   networks:
  #     - devices_network
  #   depends_on:
  #     grafana:
  #       condition: service_healthy
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8081/"]
    #   interval: 60s
    #   timeout: 15s
    #   retries: 3
    #   start_period: 30s

  # mysql:
  #   container_name: mysql
  #   image: mysql:8.0
  #   user: "999:999"
  #   ports:
  #     - "3306:3306"
  #   env_file:
  #     - .env.secrets
  #   environment:
  #     - TZ=America/Sao_Paulo 
  #   volumes:
  #     - ./volumes/mysql/data:/var/lib/mysql
  #   networks:
  #     - devices_network
  #   command: >
  #     --default-authentication-plugin=mysql_native_password
  #     --character-set-server=utf8mb4
  #     --collation-server=utf8mb4_unicode_ci
  #   healthcheck:
  #     test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 30s

  postgres:
    container_name: postgres
    image: postgres:15
    env_file:
      - .env.secrets
    volumes:
      - ./volumes/postgres/data:/var/lib/postgresql/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - devices_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U grafana"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s

  iperf3:
    container_name: iperf3
    image: networkstatic/iperf3
    hostname: iperf3
    command: -s
    ports:
      - "5201:5201"
    networks:
      - devices_network
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    # healthcheck:
    #   test: ["CMD", "pgrep", "iperf3"]
    #   interval: 45s
    #   timeout: 5s
    #   retries: 3
    #   start_period: 5s

  virtual_device_1:
    container_name: device_1
    build:
      dockerfile: ${UBUNTU_DOCKERFILE}
      context: .
    image: ${UBUNTU_DEVICE_IMG}
    hostname: device1
    deploy:
      resources:
        limits:
          cpus: '0.6'
          memory: 1024M
    networks:
      - devices_network
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./scripts/load_coordinator.sh:/usr/local/bin/load_coordinator.sh:ro
      - load_coordinator:/var/run/load_coordinator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9273/metrics"]
      interval: 60s
      timeout: 5s
      retries: 3
      start_period: 10s

  virtual_device_2:
    container_name: device_2
    build:
      dockerfile: ${UBUNTU_DOCKERFILE}
      context: .
    image: ${UBUNTU_DEVICE_IMG}
    hostname: device2
    deploy:
      resources:
        limits:
          cpus: '0.6'
          memory: 900M
    networks:
      - devices_network
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./scripts/load_coordinator.sh:/usr/local/bin/load_coordinator.sh:ro
      - load_coordinator:/var/run/load_coordinator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9273/metrics"]
      interval: 60s
      timeout: 5s
      retries: 3
      start_period: 10s

  virtual_device_3:
    container_name: device_3
    build:
      dockerfile: ${UBUNTU_DOCKERFILE}
      context: .
    image: ${UBUNTU_DEVICE_IMG}
    hostname: device3
    deploy:
      resources:
        limits:
          cpus: '0.7'
          memory: 800M
    networks:
      - devices_network
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./scripts/load_coordinator.sh:/usr/local/bin/load_coordinator.sh:ro
      - load_coordinator:/var/run/load_coordinator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9273/metrics"]
      interval: 60s
      timeout: 5s
      retries: 3
      start_period: 10s

  virtual_device_4:
    container_name: device_4
    build:
      dockerfile: ${ALPINE_DOCKERFILE}
      context: .
    image: ${ALPINE_DEVICE_IMG}
    hostname: device4
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 886M
    networks:
      - devices_network
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./scripts/load_coordinator.sh:/usr/local/bin/load_coordinator.sh:ro
      - load_coordinator:/var/run/load_coordinator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9273/metrics"]
      interval: 60s
      timeout: 5s
      retries: 3
      start_period: 10s

  virtual_device_5:
    container_name: device_5
    build:
      dockerfile: ${ALPINE_DOCKERFILE}
      context: .
    image: ${ALPINE_DEVICE_IMG}
    hostname: device5
    deploy:
      resources:
        limits:
          cpus: '0.6'
          memory: 750M
    networks:
      - devices_network
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./scripts/load_coordinator.sh:/usr/local/bin/load_coordinator.sh:ro
      - load_coordinator:/var/run/load_coordinator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9273/metrics"]
      interval: 60s
      timeout: 5s
      retries: 3
      start_period: 10s

volumes:
  load_coordinator:

networks:
  devices_network:
    driver: bridge